class ListNode:

    def __init__(self, val = 0, next = None):
        self.val= val
        self.next= next


class MyLinkedList:

    def __init__(self):
        self.head = ListNode()
        self.size = 0
        

    def get(self, index: int) -> int:
        if index < 0 or index >= self.size:
            return -1
        node = self.head
        for _ in range(index + 1):
            node = node.next
        return node.val
            

    def addAtHead(self, val: int) -> None:
        self.addAtIndex(0, val)
        

    def addAtTail(self, val: int) -> None:
        self.addAtIndex(self.size, val)
        
    def addAtIndex(self, index: int, val: int) -> None:
        
        if index > self.size:
            return
        node = self.head
        
        self.size += 1
        
        for _ in range(index):
            node = node.next

        newNode = ListNode(val, node.next)
        node.next = newNode
            
        

    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return
        
        self.size -= 1
        node = self.head
        
        for _ in range(index):
            node = node.next
        node.next = node.next.next
            
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)

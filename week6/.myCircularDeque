class MyCircularDeque:

    def __init__(self, k: int):
        self.myCircularDequeue = [0]*k
        self.size = k
        self.front = -1 
        self.rear = 0
        

    def insertFront(self, value: int) -> bool:
        if self.isEmpty():
            self.front = self.rear = 0
            self.myCircularDequeue[self.front] = value
            return True
        elif self.isFull() == False:
            if self.front == 0:
                self.front = self.size-1
                self.myCircularDequeue[self.front] = value
                return True
            else:
                self.front -= 1 
                self.myCircularDequeue[self.front] = value
                return True
        else:
            return False
                

    def insertLast(self, value: int) -> bool:
        if self.isEmpty():
            self.front = self.rear = 0
            self.myCircularDequeue[self.rear] = value
            return True
        elif self.isFull() == False:
            if self.rear == self.size - 1:
                self.rear = 0
                self.myCircularDequeue[self.rear] = value
                return True
            else:
                self.rear += 1
                self.myCircularDequeue[self.rear] = value
                return True
            
        else:
            return False
        

    def deleteFront(self) -> bool:
        if self.isEmpty() == False:
            if self.front == self.rear:
                self.front = self.rear = -1
                return True
            elif self.front == self.size - 1:
                self.front = 0
                return True
            else:
                self.front +=1
                
                return True
        else:
            return False

    def deleteLast(self) -> bool:
        if self.isEmpty() == False:
            if self.rear == self.front:
                self.rear = 0
                self.front = -1
            if self.rear == 0:
                self.rear = self.size - 1
                return True
            else:
                self.rear -= 1
                return True
        else:
            return False
        
    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        else:
            result = self.myCircularDequeue[self.front]
            return result

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        else:
            result = self.myCircularDequeue[self.rear]
            return result
        

    def isEmpty(self) -> bool:
        if self.front == -1:
            return True
        else:
            return False
        

    def isFull(self) -> bool:
        if (self.front == 0 and self.rear == self.size-1) or self.front == self.rear + 1:
            return True
        else:
            return False
    


# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()
